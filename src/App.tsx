import "./App.css";
import styled from "styled-components";
import { useEffect, useState } from "react";

function App() {
  // Styled components for layout, title, scoreboard, game pad, and buttons
  const Layout = styled.div`
    display: flex;
    align-items: center;
    flex-direction: column;
  `;

  const Title = styled.h1`
    margin: 2rem;
    font-size: 3rem;
  `;

  const Scoreboard = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  `;

  const Pad = styled.h1`
    display: grid;
    grid-template-columns: repeat(3, 33.33%);
    grid-template-rows: repeat(3, 33.33%);
    height: 50rem;
    width: 50rem;
  `;

  const Footer = styled.h1`
    display: flex;
    justify-content: left;
    margin: 1rem;
  `;

  // Styling for the buttons with conditional backgrounds for when buttons are lit
  const Button = styled.button<{ isLit?: boolean }>`
    background: transparent;
    border-radius: 1rem;
    border-width: 0.25rem;
    border-color: black;
    width: max;
    height: max;
    margin: 1rem;

    &:nth-child(2) {
      background: ${(props) => (props.isLit ? "#3171b5" : "#214c7a")};
      &:hover {
        cursor: pointer;
      }
    }
    &:nth-child(4) {
      background: ${(props) => (props.isLit ? "#a6b531" : "#777a21")};
      &:hover {
        cursor: pointer;
      }
    }
    &:nth-child(6) {
      background: ${(props) => (props.isLit ? "#b53131" : "#7a2121")};
      &:hover {
        cursor: pointer;
      }
    }
    &:nth-child(8) {
      background: ${(props) => (props.isLit ? "#33b531" : "#217a34")};
      &:hover {
        cursor: pointer;
      }
    }
  `;

  const Start = styled.h1`
    cursor: pointer;
  `;

  // State management for game logic and UI
  const [score, setScore] = useState(0); // Tracks the player's score
  const [hideStart, setHideStart] = useState(true); // Hides the start button once game begins
  const [simonTurn, setSimonTurn] = useState(false); // Boolean to track Simon's turn
  const [playerTurn, setPlayerTurn] = useState(false); // Boolean to track player's turn
  const [round, setRound] = useState(0); // Tracks the current round
  const [randSeq, setRandSeq] = useState<number[]>([]); // Random sequence generated by Simon
  const [playerSeq, setPlayerSeq] = useState<number[]>([]); // Player's input sequence

  // Button light states
  const [isLitOne, setIsLitOne] = useState(false);
  const [isLitTwo, setIsLitTwo] = useState(false);
  const [isLitThree, setIsLitThree] = useState(false);
  const [isLitFour, setIsLitFour] = useState(false);

  /* Starts a new game: resets relevant states, 
  generates a random sequence of numbers (1-4) up to 100 long sequence 
  and sets the first round */
  const startGame = () => {
    const generateSeed = Array.from(
      { length: 100 },
      () => Math.floor(Math.random() * 4) + 1
    );
    setRandSeq(generateSeed);
    setHideStart(false);
    setScore(0);
    setRound(1);
    setSimonTurn(true);
    console.log(generateSeed)
  };

  // If it's Simon's turn, run the sequence
  useEffect(() => {
    if (simonTurn) {
      runSimonTurn();
    }
  }, [simonTurn, round]); // Re-run when Simon's turn or round changes

  // Simon flashes the sequence to the player
  const runSimonTurn = () => {
    // Iterate through the sequence up to the current round number
    for (let i = 0; i < round; i++) {
      // Flash each button with a delay, corresponding to its order in the sequence
      setTimeout(() => {
        flashButton(randSeq[i]);
      }, i * 1000);
    }

    // After flashing the sequence, pass control to the player
    setTimeout(() => {
      setSimonTurn(false);
      setPlayerTurn(true);
      setPlayerSeq([]);
    }, round * 1000);
  };

  // Helper function to flash a button based on its number (1-4)
  const flashButton = (num: number) => {
    if (num === 1) {
      setIsLitOne(true);
      setTimeout(() => setIsLitOne(false), 500); // Duration of the button flash (500ms)
    } else if (num === 2) {
      setIsLitTwo(true);
      setTimeout(() => setIsLitTwo(false), 500);
    } else if (num === 3) {
      setIsLitThree(true);
      setTimeout(() => setIsLitThree(false), 500);
    } else if (num === 4) {
      setIsLitFour(true);
      setTimeout(() => setIsLitFour(false), 500);
    }
  };

  // Handle player's button clicks during their turn
  const handleClick = (num: number) => {
    if (!playerTurn) return; // Prevent clicks if it's not player's turn

    const newPlayerSeq = [...playerSeq, num]; // Add clicked button to player's sequence
    setPlayerSeq(newPlayerSeq);
    flashButton(num); // Flash the button when clicked

    // Check if player's sequence matches Simon's so far
    if (
      newPlayerSeq[newPlayerSeq.length - 1] !== randSeq[newPlayerSeq.length - 1]
    ) {
      alert("Game Over! Final Score: " + score); // Game over if mismatch
      resetGame();
      return;
    }

    // If player completes the round, increase score and move to next round
    if (newPlayerSeq.length === round) {
      setTimeout(() => {
        setScore(score + 1);
        setPlayerTurn(false);
        setSimonTurn(true);
        setRound(round + 1); // Increment the round
      }, 1000);
    }
  };

  // Reset game state to initial values
  const resetGame = () => {
    setHideStart(true);
    setRound(0);
    setScore(0);
    setPlayerTurn(false);
    setSimonTurn(false);
  };

  return (
    <>
      <Layout>
        <Title>Simon Says</Title>
        <Pad>
          <div></div>
          <Button isLit={isLitOne} onClick={() => handleClick(1)}></Button>
          <div></div>
          <Button isLit={isLitTwo} onClick={() => handleClick(2)}></Button>
          <Scoreboard>
            <p>Score: {score}</p>
            {hideStart && (
              <Start onClick={startGame}>{hideStart ? "Start" : ""}</Start>
            )}
          </Scoreboard>
          <Button isLit={isLitThree} onClick={() => handleClick(3)}></Button>
          <div></div>
          <Button isLit={isLitFour} onClick={() => handleClick(4)}></Button>
        </Pad>
        <Footer>By: Khoi</Footer>
      </Layout>
    </>
  );
}


/*
  Flaws of the game:
  - Can't spam buttons as a player.
  - Unclear when simon's turn ends and player's turn begins.
  - Button's feel "sticky" (too much delay) can't fix due to hoisting and timings.
    SetTimeouts everywhere doesn't help either. 
  - Add highscore board later
  - Add time penalty later
*/
export default App;
